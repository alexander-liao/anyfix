'''

from math import *
from lang import *
from sympy import *
import sys, re

functions = {
    '¡': lambda: 0,
    '¢': lambda: 0,
    '£': lambda: 0,
    '¤': lambda: 0,
    '¥': lambda x, y: stringify(y, sigdig = x, chop = True),
    '¦': lambda: 0,
    '©': lambda x: setRegister(x),
    '¬': lambda x: not x,
    '®': lambda: getRegister(),
    'µ': lambda: 0,
    '½': lambda x: requireSingularMonadicNumberOperator(sqrt, x, len, None, None),
    'Æ½': lambda x: requireSingularMonadicNumberOperator(lambda x: int(sqrt(x)), x, len, None, None),
    'Ç': lambda x, y: splat([y, x, y], force = True),
    'Ð': lambda x: splat([clone(x), clone(x), clone(x)], force = True),
    'Ñ': lambda: 0,
    '×': lambda x, y: multiply(y, x),
    'Ø': lambda x, y: padDefaultCentre(forceList(y), x),
    'ç': lambda x, y: splat([clone(y) for i in range(x)], force = True),
    'ð': lambda: 0,
    'ı': lambda x, y: y + x * 1j,
    'ȷ': lambda x, y: y * 10 ** x,
    'ñ': lambda: 0,
    '÷': lambda x, y: divide(y, x),
    'ø': lambda x, y, z: padcentre(forceList(z), y, forceList(x)),
    ' ': lambda: 0,
    '!': lambda x: Pi(x),
    '"': lambda x: splat([clone(x), clone(x)], force = True),
    '#': lambda x: x if isNumber(x) else Number(x),
    '$': lambda x: stringify(x),
    '%': lambda x, y: y % x,
    '&': lambda x, y: True if y and x else False,
    '\'': lambda: 0,
    '*': lambda x, y: exponentiate(y, x),
    '+': lambda x, y: addition(y, x),
    ',': lambda: 0,
    '-': lambda x: -x,
    '.': lambda: 0,
    ':': lambda x, y: intdivide(y, x),
    ';': lambda x, y: append(y, x),
    '<': lambda x, y: requireSingularDyadicNumberOperator(lambda x, y: x < y, y, x, lambda x: True, lambda x: False, len, None),
    '=': lambda x, y: x == y,
    '>': lambda x, y: requireSingularDyadicNumberOperator(lambda x, y: x < y, x, y, lambda x: True, lambda x: False, len, None),
    '?': lambda x, y, z: z if x else y,
    '@': lambda x: setRegisterNoReturn(x),
    'A': lambda x: requireSingularMonadicNumberOperator(abs, x, len, None, None),
    'B': lambda x: requireSingularMonadicNumberOperator(lambda x: basedigits(x, 2), x, len, None, None),
    'C': lambda: 0,
    'D': lambda x: requireSingularMonadicNumberOperator(lambda x: basedigits(x, 10), x, len, None, None),
    'E': lambda: 0,
    'F': lambda *a: splat(flatten(a)),
    'G': lambda: 0,
    'H': lambda: 0,
    'I': lambda *a: [a[i] - a[i - 1] for i in range(1, len(a))],
    'J': lambda x: list(range(1, 1 + len(x if hasattr(x, '__getitem__') else str(x)))),
    'K': lambda *a: ' '.join(map(str, a)),
    'L': lambda x: len(x if hasattr(x, '__getitem__') else str(x)),
    'M': lambda: 0,
    'N': lambda: 0,
    'O': lambda x: (list(map(ord, x)) if len(x) > 1 else ord(x)) if hasattr(x, '__getitem__') else chr(int(x)),
    'P': lambda *a: reduce(multiply, a),
    'Q': lambda: 0,
    'R': lambda x: list(map(Rational, range(1, int(1 + x)))),
    'S': lambda *a: reduce(addition, a),
    'T': lambda: 0,
    'U': lambda *a: splat(a[::-1]),
    'V': lambda *a: [a[0] if isNumber(a[0]) else evaluate(''.join(a[0]) if type(a) == type([]) else a[0], a[1:])] + a[1:],
    'W': lambda x: [x],
    'X': lambda *a: splat(a, force = True),
    'Y': lambda *a: '\n'.join(map(str, a)),
    'Z': lambda a: list(map(list, zip(a))),
    '^': lambda x, y: requireSingularDyadicNumberOperator(lambda x, y: x ^ y, y, x, lambda x: x, lambda x: x, mapper(ord), None, int),
    '_': lambda x, y: subtract(y, x),
    '`': lambda: 0,
    'a': lambda: 0,
    'b': lambda x, y: requireSingularMonadicNumberOperator(lambda k: basedigits(k, x), y, len, None, None),
    'c': lambda: 0,
    'd': lambda: 0,
    'e': lambda: 0,
    'f': lambda: 0,
    'g': lambda: 0,
    'h': lambda: 0,
    'i': lambda: 0,
    'j': lambda x, y: y.join(map(str, x)),
    'k': lambda: 0,
    'l': lambda: 0,
    'm': lambda: 0,
    'n': lambda: 0,
    'o': lambda: 0,
    'p': lambda x, y: padDefaultLeft(forceList(y), x),
    'q': lambda x, y: padDefaultRight(forceList(y), x),
    'r': lambda: 0,
    's': lambda x, y: blocks(y, x),
    't': lambda: 0,
    'u': lambda: 0,
    'v': lambda: 0,
    'w': lambda: 0,
    'x': lambda x, y: repeat(y, x),
    'y': lambda: 0,
    'z': lambda x, y: padzip(y, x),
    '{': lambda x, y, z: padleft(forceList(z), y, forceList(x)),
    '|': lambda x, y: True if y or x else False,
    '}': lambda x, y, z: padright(forceList(z), y, forceList(x)),
    '~': lambda: 0,
    '¶': lambda: 0,
    '°': lambda: 0,
    '¹': lambda x: x,
    '²': lambda x: x ** 2,
    '³': lambda: Integer(16),
    '⁴': lambda: Integer(10),
    '⁵': lambda: Integer(100),
    '⁶': lambda: ' ',
    '⁷': lambda: '',
    '⁸': lambda: '\n',
    '⁹': lambda: [],
    '⁺': lambda *a: splat(recursiveFilter(lambda x: x > 0, a, True)),
    '⁻': lambda *a: splat(recursiveFilter(lambda x: isNumber(x) and x < 0, a, False)),
    '⁼': lambda x, y: type(x) == type(y),
    '⁽': lambda *a: splat(a[1:] + a[:1], force = True),
    '⁾': lambda *a: splat(a[-1:] + a[:-1], force = True),
    'Ƈ': lambda: 0,
    'Ɗ': lambda: 0,
    'Ƒ': lambda x, y: allSpans(y, x),
    'Ɠ': lambda: eval(input()),
    'Ƙ': lambda: 0,
    'Ɱ': lambda x, y: bool(re.match(y, x)),
    'Ɲ': lambda x, y: re.match(y, x).end() if re.match(y, x) else 0,
    'Ƥ': lambda x: print(x),
    'Ƭ': lambda x, y: y.split(x),
    'Ʋ': lambda *a: list(a[1:a[0] + 1]) + [a[1]] + list(a[a[0] + 1:]),
    'Ȥ': lambda *a: [a[a[0]]] + list(a[1:]),
    'ɓ': lambda: 0,
    'ƈ': lambda: sys.stdin.read(1),
    'ɗ': lambda: 0,
    'ƒ': lambda x, y: re.findall(y, x),
    'ɠ': lambda: input(),
    'ɦ': lambda: exhaustInput(),
    'ƙ': lambda: exhaustInputSingleString(),
    'ɱ': lambda: splat(list(map(eval, exhaustInput()))),
    'ɲ': lambda: 0,
    'ƥ': lambda x: print(x, end = ''),
    'ɼ': lambda x, y, z: z.replace(x, y),
    'ʂ': lambda x, y, z: re.sub(x, y, z),
    'ƭ': lambda x, y: re.split(y, x),
    'ʋ': lambda *a: list(a[2:a[0] + 1]) + [a[1]] + list(a[a[0] + 1:]),
    'ȥ': lambda *a: [a[a[0]]] + list(a[1:a[0]]) + list(a[a[0]+1:]),
    'Ạ': lambda x, y: y and x,
    'Ḅ': lambda x: x % 2,
    'Ḍ': lambda: 0,
    'Ẹ': lambda: 0,
    'Ḥ': lambda: 0,
    'Ị': lambda: 0,
    'Ḳ': lambda: 0,
    'Ḷ': lambda x: list(range(x)),
    'Ṃ': lambda: 0,
    'Ṇ': lambda: 0,
    'Ọ': lambda x, y: y or x,
    'Ṛ': lambda: 0,
    'Ṣ': lambda: 0,
    'Ṭ': lambda: 0,
    'Ụ': lambda: 0,
    'Ṿ': lambda: 0,
    'Ẉ': lambda: 0,
    'Ỵ': lambda: 0,
    'Ẓ': lambda: 0,
    'Ȧ': lambda: 0,
    'Ḃ': lambda x: unbase(x, 2),
    'Ċ': lambda: 0,
    'Ḋ': lambda x: unbase(x, 10),
    'Ė': lambda: 0,
    'Ḟ': lambda: 0,
    'Ġ': lambda: 0,
    'Ḣ': lambda: 0,
    'İ': lambda x, y: [y + sum(x[:i]) for i in range(1, len(x) + 1)],
    'Ŀ': lambda x, y: levenshtein(castIterable(x), castIterable(y)),
    'Ṁ': lambda: 0,
    'Ṅ': lambda: 0,
    'Ȯ': lambda: 0,
    'Ṗ': lambda: 0,
    'Ṙ': lambda: 0,
    'Ṡ': lambda: 0,
    'Ṫ': lambda: 0,
    'Ẇ': lambda: 0,
    'Ẋ': lambda: 0,
    'Ẏ': lambda: 0,
    'Ż': lambda: 0,
    'ạ': lambda: 0,
    'ḅ': lambda x, y: unbase(y, x),
    'ḍ': lambda: 0,
    'ẹ': lambda: 0,
    'ḥ': lambda: 0,
    'ị': lambda: 0,
    'ḳ': lambda: 0,
    'ḷ': lambda: 0,
    'ṃ': lambda: 0,
    'ṇ': lambda: 0,
    'ọ': lambda: 0,
    'ṛ': lambda: 0,
    'ṣ': lambda: 0,
    'ṭ': lambda: 0,
    'ụ': lambda: 0,
    'ṿ': lambda: 0,
    'ẉ': lambda: 0,
    'ỵ': lambda: 0,
    'ẓ': lambda: 0,
    'ȧ': lambda: 0,
    'ḃ': lambda: 0,
    'ċ': lambda: 0,
    'ḋ': lambda: 0,
    'ė': lambda: 0,
    'ḟ': lambda: 0,
    'ġ': lambda x, y: gcd(x, y),
    'ḣ': lambda: 0,
    'ŀ': lambda x, y: x * y / gcd(x, y),
    'ṁ': lambda: 0,
    'ṅ': lambda: 0,
    'ȯ': lambda: 0,
    'ṗ': lambda: 0,
    'ṙ': lambda: 0,
    'ṡ': lambda: 0,
    'ṫ': lambda: 0,
    'ẇ': lambda: 0,
    'ẋ': lambda x, y: repeatIter(forceList(y), x),
    'ẏ': lambda: 0,
    'ż': lambda: 0,
    '«': lambda x, y: splat([y, x], force = True),
    '‘': lambda x: x + 1,
    '’': lambda x: x - 1,
}

'''
